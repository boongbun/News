@*PROGRESS BAR MODAL*@
<div class="modal fade in" id="mod-progress" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
            </div>
            <div class="modal-body">
                <div class="text-center">
                    <div class="i-circle warning"><i class="fa fa-info"></i></div>
                    <div id="result" style="font-size: 1.1em; padding-bottom: 5px">
                        <p id="progressBarParagraph"></p>
                    </div>
                    <div style="width: 30%; margin: 0 auto; display:none;">
                        <div id="progressbar" style="width: 300px; height: 15px"></div>
                        <br />
                    </div>
                    <div id="ProgressStripe" class="progress progress-striped active" style="position:relative; top:10px; width:100%;">
                        <div id="ProgressMessage" class="progress-bar progress-bar-info" style="width: 100%; border:none;"></div>
                    </div>
                    <br />
                </div>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<!-- /.modal -->


<script>
    function ProgressBarModal(showHide) {

        //if (showHide === 'show') {
        //    $('#mod-progress').modal('show');
        //    if (arguments.length >= 2) {
        //        $('#progressBarParagraph').text(arguments[1]);
        //    } else {
        //        $('#progressBarParagraph').text('U tijeku...');
        //    }

        //    window.progressBarActive = true;

        //} else {
        //    $('#mod-progress').modal('hide');
        //    window.progressBarActive = false;
        //}


        if (showHide === 'show') {
            if (arguments.length >= 2) {
                //$('#pbrPrepaid').html(arguments[1]);
                $('#spanProgessBarPrepaid').html(arguments[1]);
            } else {
                $('#pbrPrepaid').html('U tijeku...');
            }

            window.progressBarActive = true;

        } else {
            window.progressBarActive = false;
        }
    }

    (function ($, window, undefined) {
        /// <param name="$" type="jQuery" />
        "use strict";

        if (typeof ($.signalR) !== "function") {
            throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js.");
        }

        var signalR = $.signalR;

        function makeProxyCallback(hub, callback) {
            return function () {
                // Call the client hub method
                callback.apply(hub, $.makeArray(arguments));
            };
        }

        function registerHubProxies(instance, shouldSubscribe) {
            var key, hub, memberKey, memberValue, subscriptionMethod;

            for (key in instance) {
                if (instance.hasOwnProperty(key)) {
                    hub = instance[key];

                    if (!(hub.hubName)) {
                        // Not a client hub
                        continue;
                    }

                    if (shouldSubscribe) {
                        // We want to subscribe to the hub events
                        subscriptionMethod = hub.on;
                    } else {
                        // We want to unsubscribe from the hub events
                        subscriptionMethod = hub.off;
                    }

                    // Loop through all members on the hub and find client hub functions to subscribe/unsubscribe
                    for (memberKey in hub.client) {
                        if (hub.client.hasOwnProperty(memberKey)) {
                            memberValue = hub.client[memberKey];

                            if (!$.isFunction(memberValue)) {
                                // Not a client hub function
                                continue;
                            }

                            subscriptionMethod.call(hub, memberKey, makeProxyCallback(hub, memberValue));
                        }
                    }
                }
            }
        }

        $.hubConnection.prototype.createHubProxies = function () {
            var proxies = {};
            this.starting(function () {
                // Register the hub proxies as subscribed
                // (instance, shouldSubscribe)
                registerHubProxies(proxies, true);

                this._registerSubscribedHubs();
            }).disconnected(function () {
                // Unsubscribe all hub proxies when we "disconnect".  This is to ensure that we do not re-add functional call backs.
                // (instance, shouldSubscribe)
                registerHubProxies(proxies, false);
            });

            proxies['progressHub'] = this.createHubProxy('progressHub');
            proxies['progressHub'].client = {};
            proxies['progressHub'].server = {};

            return proxies;
        };

        signalR.hub = $.hubConnection("/signalr", { useDefaultPath: false });
        $.extend(signalR, signalR.hub.createHubProxies());

    }(window.jQuery, window));

    $(function () {
        // Reference the auto-generated proxy for the hub.
        var progress = $.connection.progressHub;
        //console.log(progress);

        

        // Create a function that the hub can call back to display messages.
        progress.client.addProgress = function (message, percentage) {
            //at this point server side had send message and percentage back to the client
            //and then we handle progress bar any way we want it
                
            //Using a function in Helper.js file we show modal and display text and percentage
            ProgressBarModal("show", message +  " " + percentage);
                
            //We're filling blue progress indicator by setting the width property to the variable
            //that was returned from the server
            //$('#ProgressMessage').width(percentage);
            $('#pbrPrepaid').width(percentage);
                
            //closing modal when the progress gets to 100%
            if (percentage === "100%") {
                ProgressBarModal();
            }                
        };

        //Before doing anything with our hub we must start it
        $.connection.hub.start().done(function () {
            
            //getting the connection ID in case you want to display progress to the specific user
            //that started the process in the first place.
            var connectionId = $.connection.hub.id;
            //console.log(connectionId);
        });

    });
</script>